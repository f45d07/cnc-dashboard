{"version":3,"sources":["logo.svg","Home.js","Machines.js","PageError.js","App.js","Header.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Machines","MachineId","useParams","PageError","App","path","component","exact","Header","Navbar","bg","variant","expand","Toggle","Collapse","className","Nav","Link","href","ButtonToolbar","Button","size","Text","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,+HCQ5BC,MAJf,WACI,MAAQ,QCOGC,MAPf,WAAqB,IACXC,EAAcC,cAAdD,UACN,OACI,wCAAcA,ICAPE,MANf,WACI,OACI,sC,YCyBOC,MAZf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,sBAAsBC,UAAWN,IAC7C,kBAAC,IAAD,CAAOO,OAAK,EAACF,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOM,KAAK,IAAIC,UAAWH,O,gCCApBK,MAjBf,WACI,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,QAAQ,QAAQC,OAAO,MACxC,kBAACH,EAAA,EAAOI,OAAR,MACA,kBAACJ,EAAA,EAAOK,SAAR,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAIC,KAAL,CAAUC,KAAK,SAAf,kCACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQT,QAAQ,UAAUU,KAAK,MAA/B,kBAGJ,kBAACZ,EAAA,EAAOK,SAAR,CAAiBC,UAAU,uBACzB,kBAACN,EAAA,EAAOa,KAAR,YAAiB,uBAAGJ,KAAK,KAAR,iBCLTK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,WACpDH,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.87f7fbba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport CardDeck from 'react-bootstrap/CardDeck';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nfunction Home() {\r\n    return (\"Home\");\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport {\r\n    useParams\r\n  } from 'react-router-dom';\r\n\r\nfunction Machines() {\r\n    let { MachineId } = useParams();\r\n    return (\r\n        <div>Machine {MachineId}</div>\r\n    );\r\n}\r\n\r\nexport default Machines;","import React from 'react';\r\n\r\nfunction PageError() {\r\n    return (\r\n        <div>404!</div>\r\n    );\r\n}\r\n\r\nexport default PageError;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  browserHistory,\n  useRouteMatch,\n  useParams\n} from 'react-router-dom';\nimport Home from './Home';\nimport Machines from './Machines';\nimport PageError from './PageError';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/machine/:MachineId\" component={Machines} />\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"*\" component={PageError} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction Header() {\r\n    return (\r\n        <Navbar bg=\"light\" variant=\"light\" expand=\"sm\">        \r\n          <Navbar.Toggle />\r\n          <Navbar.Collapse className=\"mr-auto\">\r\n            <Nav.Link href=\"#home\">Домой</Nav.Link>\r\n            <ButtonToolbar>\r\n              <Button variant=\"primary\" size=\"sm\">Small button</Button>\r\n            </ButtonToolbar>\r\n          </Navbar.Collapse>\r\n          <Navbar.Collapse className=\"justify-content-end\">\r\n            <Navbar.Text>CNC <a href=\"#\">Dashboard</a></Navbar.Text>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n  );\r\n}\r\n\r\nexport default Header;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport Header from \"./Header\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Header />, document.getElementById('header'));\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}